#!/bin/sh

# Conventional Commit Message Checker
# This hook validates that commit messages follow the Conventional Commits specification

commit_msg_file=$1
commit_msg=$(cat "$commit_msg_file")

# Define the regex pattern for conventional commits
# Format: type(scope): description
conventional_pattern='^(feat|fix|docs|style|refactor|perf|test|build|ci|chore|revert)(\([a-z0-9-]+\))?: .{1,100}'

# Check if the commit message matches the pattern
if ! echo "$commit_msg" | grep -qE "$conventional_pattern"; then
  echo "ERROR: Commit message does not follow the Conventional Commits format."
  echo ""
  echo "Your commit message:"
  echo "$commit_msg"
  echo ""
  echo "Required format:"
  echo "  type(scope): description"
  echo ""
  echo "Examples:"
  echo "  feat(auth): implement JWT token validation"
  echo "  fix(api): resolve issue with null responses"
  echo "  docs(readme): update installation instructions"
  echo ""
  echo "Valid types: feat, fix, docs, style, refactor, perf, test, build, ci, chore, revert"
  echo ""
  echo "For more information, see: https://www.conventionalcommits.org/"
  echo ""
  echo "You can bypass this hook with --no-verify (not recommended)"
  
  exit 1
fi

# Check if the description is too long (>100 chars)
description=$(echo "$commit_msg" | sed -nE 's/^[^:]+: (.*)/\1/p')
if [ ${#description} -gt 100 ]; then
  echo "ERROR: Commit message description is too long (${#description} > 100 characters)"
  echo "Please keep the description concise"
  exit 1
fi

exit 0 